/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AppRouteImport } from './routes/app/route'
import { Route as IndexImport } from './routes/index'
import { Route as ProjectsIndexImport } from './routes/projects/index'
import { Route as AppMainMenuImport } from './routes/app/main-menu'
import { Route as AppLoginImport } from './routes/app/login'
import { Route as ProjectsProjectIdRouteImport } from './routes/projects/$projectId/route'
import { Route as AppNewProjectRouteImport } from './routes/app/new-project/route'
import { Route as ProjectsProjectIdIndexImport } from './routes/projects/$projectId/index'

// Create/Update Routes

const AppRouteRoute = AppRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProjectsIndexRoute = ProjectsIndexImport.update({
  id: '/projects/',
  path: '/projects/',
  getParentRoute: () => rootRoute,
} as any)

const AppMainMenuRoute = AppMainMenuImport.update({
  id: '/main-menu',
  path: '/main-menu',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppLoginRoute = AppLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AppRouteRoute,
} as any)

const ProjectsProjectIdRouteRoute = ProjectsProjectIdRouteImport.update({
  id: '/projects/$projectId',
  path: '/projects/$projectId',
  getParentRoute: () => rootRoute,
} as any)

const AppNewProjectRouteRoute = AppNewProjectRouteImport.update({
  id: '/new-project',
  path: '/new-project',
  getParentRoute: () => AppRouteRoute,
} as any)

const ProjectsProjectIdIndexRoute = ProjectsProjectIdIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProjectsProjectIdRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRoute
    }
    '/app/new-project': {
      id: '/app/new-project'
      path: '/new-project'
      fullPath: '/app/new-project'
      preLoaderRoute: typeof AppNewProjectRouteImport
      parentRoute: typeof AppRouteImport
    }
    '/projects/$projectId': {
      id: '/projects/$projectId'
      path: '/projects/$projectId'
      fullPath: '/projects/$projectId'
      preLoaderRoute: typeof ProjectsProjectIdRouteImport
      parentRoute: typeof rootRoute
    }
    '/app/login': {
      id: '/app/login'
      path: '/login'
      fullPath: '/app/login'
      preLoaderRoute: typeof AppLoginImport
      parentRoute: typeof AppRouteImport
    }
    '/app/main-menu': {
      id: '/app/main-menu'
      path: '/main-menu'
      fullPath: '/app/main-menu'
      preLoaderRoute: typeof AppMainMenuImport
      parentRoute: typeof AppRouteImport
    }
    '/projects/': {
      id: '/projects/'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsIndexImport
      parentRoute: typeof rootRoute
    }
    '/projects/$projectId/': {
      id: '/projects/$projectId/'
      path: '/'
      fullPath: '/projects/$projectId/'
      preLoaderRoute: typeof ProjectsProjectIdIndexImport
      parentRoute: typeof ProjectsProjectIdRouteImport
    }
  }
}

// Create and export the route tree

interface AppRouteRouteChildren {
  AppNewProjectRouteRoute: typeof AppNewProjectRouteRoute
  AppLoginRoute: typeof AppLoginRoute
  AppMainMenuRoute: typeof AppMainMenuRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppNewProjectRouteRoute: AppNewProjectRouteRoute,
  AppLoginRoute: AppLoginRoute,
  AppMainMenuRoute: AppMainMenuRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

interface ProjectsProjectIdRouteRouteChildren {
  ProjectsProjectIdIndexRoute: typeof ProjectsProjectIdIndexRoute
}

const ProjectsProjectIdRouteRouteChildren: ProjectsProjectIdRouteRouteChildren =
  {
    ProjectsProjectIdIndexRoute: ProjectsProjectIdIndexRoute,
  }

const ProjectsProjectIdRouteRouteWithChildren =
  ProjectsProjectIdRouteRoute._addFileChildren(
    ProjectsProjectIdRouteRouteChildren,
  )

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/app/new-project': typeof AppNewProjectRouteRoute
  '/projects/$projectId': typeof ProjectsProjectIdRouteRouteWithChildren
  '/app/login': typeof AppLoginRoute
  '/app/main-menu': typeof AppMainMenuRoute
  '/projects': typeof ProjectsIndexRoute
  '/projects/$projectId/': typeof ProjectsProjectIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/app/new-project': typeof AppNewProjectRouteRoute
  '/app/login': typeof AppLoginRoute
  '/app/main-menu': typeof AppMainMenuRoute
  '/projects': typeof ProjectsIndexRoute
  '/projects/$projectId': typeof ProjectsProjectIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/app/new-project': typeof AppNewProjectRouteRoute
  '/projects/$projectId': typeof ProjectsProjectIdRouteRouteWithChildren
  '/app/login': typeof AppLoginRoute
  '/app/main-menu': typeof AppMainMenuRoute
  '/projects/': typeof ProjectsIndexRoute
  '/projects/$projectId/': typeof ProjectsProjectIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/app'
    | '/app/new-project'
    | '/projects/$projectId'
    | '/app/login'
    | '/app/main-menu'
    | '/projects'
    | '/projects/$projectId/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/app'
    | '/app/new-project'
    | '/app/login'
    | '/app/main-menu'
    | '/projects'
    | '/projects/$projectId'
  id:
    | '__root__'
    | '/'
    | '/app'
    | '/app/new-project'
    | '/projects/$projectId'
    | '/app/login'
    | '/app/main-menu'
    | '/projects/'
    | '/projects/$projectId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRouteRoute: typeof AppRouteRouteWithChildren
  ProjectsProjectIdRouteRoute: typeof ProjectsProjectIdRouteRouteWithChildren
  ProjectsIndexRoute: typeof ProjectsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRouteRoute: AppRouteRouteWithChildren,
  ProjectsProjectIdRouteRoute: ProjectsProjectIdRouteRouteWithChildren,
  ProjectsIndexRoute: ProjectsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/app",
        "/projects/$projectId",
        "/projects/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/app": {
      "filePath": "app/route.tsx",
      "children": [
        "/app/new-project",
        "/app/login",
        "/app/main-menu"
      ]
    },
    "/app/new-project": {
      "filePath": "app/new-project/route.tsx",
      "parent": "/app"
    },
    "/projects/$projectId": {
      "filePath": "projects/$projectId/route.tsx",
      "children": [
        "/projects/$projectId/"
      ]
    },
    "/app/login": {
      "filePath": "app/login.tsx",
      "parent": "/app"
    },
    "/app/main-menu": {
      "filePath": "app/main-menu.tsx",
      "parent": "/app"
    },
    "/projects/": {
      "filePath": "projects/index.tsx"
    },
    "/projects/$projectId/": {
      "filePath": "projects/$projectId/index.tsx",
      "parent": "/projects/$projectId"
    }
  }
}
ROUTE_MANIFEST_END */
